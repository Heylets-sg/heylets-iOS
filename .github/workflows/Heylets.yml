# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

# Ï∞∏Í≥† ÏÇ¨Ïù¥Ìä∏
# https://munokkim.medium.com/github-actions-fastlaneÏúºÎ°ú-Ïï±-Î∞∞Ìè¨-ÏûêÎèôÌôîÌïòÍ∏∞-5a420493e978
# 


name: Heylets

on: [push]
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."


# on: # Ïñ∏Ï†ú ÌñâÎèôÏùÑ Ìä∏Î¶¨Í±∞ ÏãúÌÇ¨ÏßÄÏóê Í¥ÄÌïú Î¨∏Î≤ï
#   push: # push Ìä∏Î¶¨Í±∞
#     branches: [ "develop" ] # Î∏åÎûúÏπò Ìë∏Ïãú Ìä∏Î¶¨Í±∞
#   pull_request: # PR Ìä∏Î¶¨Í±∞
#     branches: [ "develop" ]

# jobs:
#   build:
#     # Ïñ¥Îäê ÌîåÎû´ÌèºÏóêÏÑú Ïã§ÌñâÏãúÌÇ¨ÏßÄ ÏÑ§Ï†ï (iOSÏù∏ Í≤ΩÏö∞ ÎîîÌè¥Ìä∏ Í∞í macos-latestÎ°ú ÏÑ§Ï†ï -> macOS)
#     runs-on: macos-latest

#     steps:
#     # 1. Git Repository Checkout
#     - name: Checkout Repository
#       uses: actions/checkout@v4 #ÌÖåÏä§Ìä∏Î•º ÌïòÍ∏∞ ÏúÑÌï¥ÏÑú RepositoryÏùò ÏΩîÎìú Î≥µÏÇ¨Î≥∏ÏùÑ ÎßåÎìúÎäî ÏΩîÎìú

#     # 2. ÌîÑÎ°úÏ†ùÌä∏ buildÎ•º ÏàòÌñâÌï† XCodeÏùò Î≤ÑÏ†Ñ ÏÑ§Ï†ï
#     - name: Select Xcode Version
#       uses: maxim-lobanov/setup-xcode@v1
#       with:
#           xcode-version: latest-stable

#     # 3. Tuist ÏÑ§Ïπò Î∞è ÌôïÏù∏

#     - name: Install Tuist
#       run: |
#         curl -Ls https://uninstall.tuist.io | bash
#         curl -Ls https://install.tuist.io | bash -s -- 3.28.0
#         echo "$HOME/.tuist/bin" >> $GITHUB_PATH
      

#     - name: Tuist Version Check
#       run: tuist version

#     # 4. Fetch Tuist & Generate
#     - name: Fetch Tuist
#       run: tuist fetch

#     # 5. Pod install
#     # - run: pod install

#     # 6. Build Project using xcodebuild
#     #- name: Build Project
#     #  run: xcodebuild -workspace "{PROJECT_NAME}.xcworkspace" -scheme "{SCHEME_NAME}" -destination "platform=iOS Simulator,name={DEVICE_NAME},OS=16.0" -verbose clean build
    
#     # secretsÏóê Ï†ÄÏû•Îêú SSH_KEYÎ•º Î∞õÏïÑÏôÄÏÑú matchÏóê ÏÇ¨Ïö©Ìï† Í∂åÌïú Î∞õÏïÑÏò¥
#     - uses: shimataro/ssh-key-action@v2
#       with:
#         key: ${{ secrets.SSH_KEY }}
#     # ruby ÏÑ§Ïπò
#     - uses: ruby/setup-ruby@v1
#       with:
#         ruby-version: ${{ matrix.ruby }}
#         bundler-cache: true
#     # fastlane ÏÑ§Ïπò
#     - run: brew install fastlane
#     - run: build exec fastlane upload_testflight
#       env:
#         MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
#         KEYCHAIN_NAME: ${{ secrets.KEYCHAIN_NAME }}
#         KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#         APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
#         APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
#         APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
